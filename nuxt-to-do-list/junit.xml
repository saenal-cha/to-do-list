<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="16" failures="1" time="1.63">
  <testsuite name="index" errors="0" failures="1" skipped="0" timestamp="2019-05-03T02:49:28" time="0.797" tests="1">
    <testcase classname="index should get to do list items when call getTodo method" name="index should get to do list items when call getTodo method" time="0.016">
      <failure>TypeError: Cannot read property &apos;get&apos; of undefined
    at APIService.getTodos (/Users/saenal.cha/Code/to-do-list/nuxt-to-do-list/libraries/APIService.js:26:24)
    at VueComponent.getTodos (/Users/saenal.cha/Code/to-do-list/nuxt-to-do-list/pages/index.vue:48:18)
    at Object.it (/Users/saenal.cha/Code/to-do-list/nuxt-to-do-list/__tests__/pages/index.spec.js:60:16)
    at Object.asyncFn (/Users/saenal.cha/Code/to-do-list/nuxt-to-do-list/node_modules/jest-jasmine2/build/jasmine_async.js:124:345)
    at resolve (/Users/saenal.cha/Code/to-do-list/nuxt-to-do-list/node_modules/jest-jasmine2/build/queue_runner.js:46:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/Users/saenal.cha/Code/to-do-list/nuxt-to-do-list/node_modules/jest-jasmine2/build/queue_runner.js:34:499)
    at promise.then (/Users/saenal.cha/Code/to-do-list/nuxt-to-do-list/node_modules/jest-jasmine2/build/queue_runner.js:74:39)
    at processTicksAndRejections (internal/process/task_queues.js:86:5)</failure>
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2019-05-03T02:49:29" time="0.013" tests="2">
    <testcase classname=" &quot;stateOfTodoChanging&quot; returns if &quot;state.isTodoChanging&quot; is false" name=" &quot;stateOfTodoChanging&quot; returns if &quot;state.isTodoChanging&quot; is false" time="0.001">
    </testcase>
    <testcase classname=" &quot;stateOfTodoChanging&quot; returns if &quot;state.isTodoChanging&quot; is true" name=" &quot;stateOfTodoChanging&quot; returns if &quot;state.isTodoChanging&quot; is true" time="0">
    </testcase>
  </testsuite>
  <testsuite name="CreateTodo" errors="0" failures="0" skipped="0" timestamp="2019-05-03T02:49:29" time="0.129" tests="7">
    <testcase classname="CreateTodo has a h1" name="CreateTodo has a h1" time="0.013">
    </testcase>
    <testcase classname="CreateTodo has correct text in H1 tag: 할 일 목록 만들기" name="CreateTodo has correct text in H1 tag: 할 일 목록 만들기" time="0.005">
    </testcase>
    <testcase classname="CreateTodo has correct text in SMALL tag: 할 일을 적고 [엔터] 키를 누르거나 [추가하기] 버튼을 누르세요" name="CreateTodo has correct text in SMALL tag: 할 일을 적고 [엔터] 키를 누르거나 [추가하기] 버튼을 누르세요" time="0.004">
    </testcase>
    <testcase classname="CreateTodo has a button" name="CreateTodo has a button" time="0.004">
    </testcase>
    <testcase classname="CreateTodo has correct text in BUTTON tag: 추가하기" name="CreateTodo has correct text in BUTTON tag: 추가하기" time="0.01">
    </testcase>
    <testcase classname="CreateTodo shows validation message when text-field has no text" name="CreateTodo shows validation message when text-field has no text" time="0.008">
    </testcase>
    <testcase classname="CreateTodo success to emit to create this todo object when text-filed is validated by not empty text" name="CreateTodo success to emit to create this todo object when text-filed is validated by not empty text" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="CreateTodo" errors="0" failures="0" skipped="0" timestamp="2019-05-03T02:49:29" time="0.11" tests="3">
    <testcase classname="CreateTodo has a TABLE tag" name="CreateTodo has a TABLE tag" time="0.005">
    </testcase>
    <testcase classname="CreateTodo should emit delete todo event" name="CreateTodo should emit delete todo event" time="0.001">
    </testcase>
    <testcase classname="CreateTodo should emit update todo event" name="CreateTodo should emit update todo event" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2019-05-03T02:49:29" time="0.022" tests="2">
    <testcase classname=" change &quot;isTodoChanging&quot; value when &quot;changeTodo&quot; is commited" name=" change &quot;isTodoChanging&quot; value when &quot;changeTodo&quot; is commited" time="0.002">
    </testcase>
    <testcase classname=" change &quot;isTodoChanging&quot; value when &quot;finishChangeTodo&quot; is commited" name=" change &quot;isTodoChanging&quot; value when &quot;finishChangeTodo&quot; is commited" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2019-05-03T02:49:29" time="0.016" tests="1">
    <testcase classname=" &quot;changeTodo&quot; change &quot;state.isTodoChange&quot; by true" name=" &quot;changeTodo&quot; change &quot;state.isTodoChange&quot; by true" time="0.001">
    </testcase>
  </testsuite>
</testsuites>